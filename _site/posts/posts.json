[
  {
    "path": "posts/2021-11-20-data-import-with-r/",
    "title": "Importation de données dans R ",
    "description": "facilité d'import de données.",
    "author": [
      {
        "name": "Ousmane Ouedraogo",
        "url": {}
      }
    ],
    "date": "2021-11-20",
    "categories": [],
    "contents": "\nProcessus d’analyse de donnéesIntroduction\nLa première étape de tout processus d’analyse de données consiste à obtenir les données. Les données peuvent être dans divers formats, mais les plus répandu sont les fichiers texte et Excel. Ce tutoriel a pour but d’expliquer comment importer des données à partir de fichiers courants dans R en utilisant les packages comme {readr},{readxl},{writexl} .\nAvant toute chose, il est important d’attirer votre attention sur les noms des fichiers et dossiers sur votre ordinateur. il est important d’éviter les espaces, les accents et d’autres caractères spéciaux dans les noms de dossiers ou fichiers. Préferer par exemple “analyse_sous_R” à”Analyse sous R” comme nom de dossier. Il en est de même pour les fichiers.\nInstallation et chargement des packages\nSi vous ne disposez pas des packages mentionés ci-dessus, installez les en utilisant la commande install.packages(\"nom_package\"). Les commandes ci-après servent à installer et charger les packages requis.\n\n\npackages <- c(\"readr\",\"readxl\",\"vroom\",\"rio\")\n# install.packages(packages)\nlibrary(readr)\nlibrary(vroom)\nlibrary(readxl)\nlibrary(rio)\n\n\n\nImport des fichiers textes plats\nLes fichiers textes (.csv, .tsv, .txt ) sont un moyen courant de conserver et d’échanger des données rectangulaires, car presque toutes les applications de données prennent en charge l’exportation de données en ces formats. Les formats de fichier texte utilisent des délimiteurs bien définis (virgule, point-virgule, espace, tabulation,etc.). Par conséquent, l’importation de différents types de fichiers texte peut suivre un processus assez cohérent une fois que vous avez identifié le délimiteur.\nLe package {readr}\nLe package readr propose plusieurs fonctions adaptées pour importer des fichiers plats de taille limitée (moins de 1 Go) :\nread_csv() : lecture d’un csv délimité par des virgules, avec un point comme marqueur décimal ;\nread_csv2() : lecture d’un csv séparé par des points-virgules, avec une virgule comme marqueur décimal ;\nread_delim() : fonction plus générale et paramétrable, pour lire des fichiers délimités.\nNous allons utiliser read_csv et read_csv2() et en voici les principales arguments:\nfile - chemin du fichier à importer\ncol_names - valeurs logique, indique si la première ligne est une en-tête ou non\nskip - le nombre de ligne à sauter avant l’importation (0 par défaut)\nExemple :\n\n\ndata_csv <- read_csv(file = \"/Users/ousmane/Documents/data/example_data.csv\",\n                     col_names = TRUE)\nhead(data_csv)\n\n\n# A tibble: 6 × 3\n   year nationality estimate\n  <dbl> <chr>          <dbl>\n1  2010 British           92\n2  2011 British           81\n3  2012 British           79\n4  2013 British           79\n5  2014 British           81\n6  2015 British           88\n\nDe même avec read_csv2 :\n\n\ndata_csv2 <- read_csv2(file = \"/Users/ousmane/Documents/data/example_data2.csv\",\n                     col_names = TRUE)\nhead(data_csv2)\n\n\n# A tibble: 6 × 3\n   year nationality estimate\n  <dbl> <chr>          <dbl>\n1  2010 British           92\n2  2011 British           81\n3  2012 British           79\n4  2013 British           79\n5  2014 British           81\n6  2015 British           88\n\nLa fonction read_delim() est faite pour lire toutes sortes de fichiers plats, et propose de nombreuses options pour l’adapter au fichier considéré. Elle est puissante, mais plus difficile à utiliser que les fonctions read_csv() et read_csv2(), qui sont des versions simplifiées de read_delim(). En pratique, ces deux fonctions sont le plus souvent suffisantes, et il est rare d’avoir vraiment besoin d’utiliser read_delim().\nLa fonction read_delim() propose les mêmes options que read_csv() et read_csv2(), avec deux ajouts principaux :delim : le délimiteur du fichier plat ;\nescape_backslash (TRUE/FALSE) : les caractères spéciaux du fichier plat ont-ils un échappement (\\) ?\nPour en savoir plus sur read_delim(), il suffit de consulter l’aide avec ?read_delim.\nExemple :\nDans cet exemple, nous alons lire et fichier texte dont le délimiteur est tabulation \\t et les données manquantes codées NP\n\n\ndata_delim <- read_delim(\n  file = \"/Users/ousmane/Documents/data/example_data.tsv\",\n  col_names = TRUE,\n  delim = \"\\t\",\n  na = \"NP\")\nhead(data_delim)\n\n\n# A tibble: 6 × 3\n   year nationality estimate\n  <dbl> <chr>          <dbl>\n1  2010 British           92\n2  2011 British           81\n3  2012 British           NA\n4  2013 British           79\n5  2014 British           81\n6  2015 British           88\n\nLe package {vroom}\nLe package {vroom} contient une fonction principale vroom() qui est utilisée pour lire tous les types de fichiers textesdélimités. Un fichier délimité est tout fichier dans lequel les données sont séparées (délimitées) par un ou plusieurs caractères. C’est un véritable couteau suisse. Tout ce dont vous avez besoin de savoir c’est qu’il s’agit seulement d’un fichier texte delimité. Il est rapide, et peut même lire des fichiers compréssés.\nExemple avec les trois fichiers précédents :\n\n\n# premier fichier\ndata_1 <- vroom(file = \"/Users/ousmane/Documents/data/example_data.csv\")\n# le second\ndata_2 <- vroom(file = \"/Users/ousmane/Documents/data/example_data2.csv\")\n# le troisième\ndata_3 <- vroom(file = \"/Users/ousmane/Documents/data/example_data.tsv\",\n              na = \"NP\")\nhead(data_3)\n\n\n# A tibble: 6 × 3\n   year nationality estimate\n  <dbl> <chr>          <dbl>\n1  2010 British           92\n2  2011 British           81\n3  2012 British           NA\n4  2013 British           79\n5  2014 British           81\n6  2015 British           88\n\nLe tout en une seule fonction !\nImport des fichiers Excel\nLes fichiers Excel (.xls et .xlsx) sont largement utilisés pour stocker des données pour des raisons de commodité mais aussi parce que tout le monde sait exploité un fichier Excel.\nLe package {readxl}\nLe package readxl permet d’extraire facilement des données d’Excel avec R. Par rapport à de nombreux packages existants (par exemple, gdata, xlsx, xlsReadWrite), readxl n’a pas de dépendances externes, il est donc facile à installer et à utiliser sur tous les systèmes d’exploitation. Il est conçu pour fonctionner avec des données tabulaires.\nreadxl prend en charge à la fois le format .xls hérité et le format .xlsx moderne basé sur XML.\nExemple\n\n\ndata_xlsx <- read_excel(\n  path = \"/Users/ousmane/Documents/data/exemple_data.xlsx\")\n\nhead(data_xlsx)\n\n\n# A tibble: 6 × 3\n   year nationality estimate\n  <dbl> <chr>          <dbl>\n1  2010 British           92\n2  2011 British           81\n3  2012 British           79\n4  2013 British           79\n5  2014 British           81\n6  2015 British           88\n\nBonus : package {rio}\nLe package rio permet d’importer une très grande variétés de données avec une seule commande import(). La fonction dévine le format à partir de l’extension du fichiers ainsi que les sépareurs de fichiers. Le package est assez pratique. Des liens seront fournies pour en savoir plus sur ce package et bien entendu tpour out les autres aussi.\n\n\nlibrary(rio)\ninstall_formats()\n\n\n[1] TRUE\n\ndata_xlsx <- import(file = \"/Users/ousmane/Documents/data/exemple_data.xlsx\")\nhead(data_xlsx)\n\n\n  year nationality estimate\n1 2010     British       92\n2 2011     British       81\n3 2012     British       79\n4 2013     British       79\n5 2014     British       81\n6 2015     British       88\n\nPour en savoir plus\nhttps://www.book.utilitr.org/ - Chapitre 14-16 (en français)\nUC R Data Import tutorial - Bradley Bohemke\nLe package rio - en savoir plus\nLe package vroom - en savoir plus\nLe package readr - en savoir plus\nLa session R\nAnalyses were conducted using the R Statistical language (version 4.0.5; R Core Team, 2021) on macOS Big Sur 11.6.1, using the packages rio (version 0.5.27; Chung-hong Chan et al., 2021), readxl (version 1.3.1; Hadley Wickham and Jennifer Bryan, 2019), readr (version 2.1.0; Hadley Wickham and Jim Hester, 2021) and vroom (version 1.5.6; Jim Hester and Hadley Wickham, 2021).\nReferences\nChung-hong Chan, Geoffrey CH Chan, Thomas J. Leeper, and Jason Becker (2021). rio: A Swiss-army knife for data file I/O. R package version 0.5.27.\nHadley Wickham and Jennifer Bryan (2019). readxl: Read Excel Files. R package version 1.3.1. https://CRAN.R-project.org/package=readxl\nHadley Wickham and Jim Hester (2021). readr: Read Rectangular Text Data. R package version 2.1.0. https://CRAN.R-project.org/package=readr\nJim Hester and Hadley Wickham (2021). vroom: Read and Write Rectangular Text Data Quickly. R package version 1.5.6. https://CRAN.R-project.org/package=vroom\nR Core Team (2021). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-20T21:25:58+01:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-18-bienvenue/",
    "title": "Bienvenue",
    "description": "Bienvenue sur ce blog consacré à la data science avec R.",
    "author": [
      {
        "name": "Ousmane Ouedraogo",
        "url": {}
      }
    ],
    "date": "2021-11-18",
    "categories": [],
    "contents": "\n\nContents\nEnfin le blog !\nPublic cible\n\nEnfin le blog !\nData science avec R est un projet de longue date, devenu aujourd’hui une réalité. Data science avec R se donne pour mission de partager avec vous de belles et pratiques expériences d’utilisation de R pour des calculs statistiques, modélisation, et l’implémentation d’algorithmes de machine learning variés pour la prise de décision.\nPublic cible\nData science avec R s’adresse a un public très varié, des amoureu(ses)x de R aux chercheurs en passant par des étudiant(e)s désireux d’apprendre de nouvelles choses avec R.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-11-18T22:08:32+01:00",
    "input_file": {}
  }
]
